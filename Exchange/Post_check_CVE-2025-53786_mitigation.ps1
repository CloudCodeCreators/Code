# Check Certificates for both App Registration and Service Principal v4.0
# This script checks for certificates assigned to both app registration and service principal
# v4.0 - Enhanced tenant input to handle UPN and extract tenant domain automatically
# Function to extract tenant domain from UPN or validate tenant input

function Get-TenantInput {
    param()
    
    Write-Host "=== TENANT SELECTION ===" -ForegroundColor Magenta
    Write-Host "Please enter the target tenant information:" -ForegroundColor White
    Write-Host ""
    Write-Host "You can provide:" -ForegroundColor Gray
    Write-Host "  - UPN (user@tenant.onmicrosoft.com)" -ForegroundColor Cyan
    Write-Host "  - Tenant domain (tenant.onmicrosoft.com)" -ForegroundColor Cyan
    Write-Host "  - Custom domain (customdomain.com)" -ForegroundColor Cyan
    Write-Host ""
    
    do {
        $userInput = Read-Host "Enter UPN or tenant domain"
        if ([string]::IsNullOrWhiteSpace($userInput)) {
            Write-Host "‚ùå Input cannot be empty. Please try again." -ForegroundColor Red
            continue
        }
        
        $userInput = $userInput.Trim()
        
        # Check if input contains @ (UPN format) - FIXED: using -match instead of -contains
        if ($userInput -match "@") {
            # Extract domain part from UPN - FIXED: proper splitting
            $parts = $userInput.Split('@')
            if ($parts.Count -eq 2 -and -not [string]::IsNullOrWhiteSpace($parts[1])) {
                $domainPart = $parts[1]
                Write-Host "‚úì Extracted tenant domain from UPN: $domainPart" -ForegroundColor Green
                $targetTenant = $domainPart
            }
            else {
                Write-Host "‚ùå Invalid UPN format. Please provide a valid UPN (user@domain.com)" -ForegroundColor Red
                continue
            }
        }
        else {
            # Assume it's already a domain
            Write-Host "‚úì Using provided domain: $userInput" -ForegroundColor Green
            $targetTenant = $userInput
        }
        
        # Validate domain format - IMPROVED: better regex pattern
        if ($targetTenant -notmatch '^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$') {
            Write-Host "‚ùå Invalid domain format. Please provide a valid domain." -ForegroundColor Red
            Write-Host "   Examples: tenant.onmicrosoft.com, customdomain.com" -ForegroundColor Gray
            continue
        }
        
        break
    } while ($true)
    
    Write-Host "‚úì Target tenant: $targetTenant" -ForegroundColor Green
    Write-Host ""
    return $targetTenant
}

# Function to safely disconnect from Graph
function Disconnect-GraphSafely {
    param()
    
    Write-Host "üîÑ Disconnecting from Microsoft Graph..." -ForegroundColor Yellow
    
    try {
        # Step 1: Disconnect
        Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null
        Write-Host "  ‚úì Graph session disconnected" -ForegroundColor Green
        
        # Step 2: Clear context if available
        try {
            if (Get-Command Clear-MgContext -ErrorAction SilentlyContinue) {
                Clear-MgContext -ErrorAction SilentlyContinue
                Write-Host "  ‚úì Context cleared" -ForegroundColor Green
            }
            else {
                Write-Host "  ‚ÑπÔ∏è Context clearing not available (this is normal)" -ForegroundColor Gray
            }
        }
        catch {
            Write-Host "  ‚ÑπÔ∏è Context clearing skipped" -ForegroundColor Gray
        }
        
        # Step 3: Force garbage collection
        [System.GC]::Collect()
        [System.GC]::WaitForPendingFinalizers()
        
        # Step 4: Wait for cleanup
        Start-Sleep -Seconds 2
        
        # Step 5: Verify disconnection
        $context = Get-MgContext -ErrorAction SilentlyContinue
        if ($context -and $context.TenantId) {
            Write-Host "  ‚ö†Ô∏è Warning: Context still exists after disconnect" -ForegroundColor Yellow
            return $false
        }
        else {
            Write-Host "  ‚úì Disconnection verified" -ForegroundColor Green
            return $true
        }
        
    }
    catch {
        Write-Host "  ‚ùå Error during disconnect: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to connect to specific tenant with enhanced domain handling
function Connect-ToTenant {
    param(
        [string]$TenantDomain
    )
    
    Write-Host "üîó Connecting to Microsoft Graph..." -ForegroundColor Yellow
    Write-Host "   Target Tenant: $TenantDomain" -ForegroundColor Gray
    Write-Host "   Required Scopes: Application.Read.All" -ForegroundColor Gray
    Write-Host ""
    
    try {
        # Try different connection methods based on domain type
        if ($TenantDomain -like "*.onmicrosoft.com") {
            Write-Host "   Using .onmicrosoft.com domain for connection..." -ForegroundColor Gray
            
            # For .onmicrosoft.com domains, try connecting with tenant domain
            try {
                Connect-MgGraph -Scopes 'Application.Read.All' -TenantId $TenantDomain -ErrorAction Stop
            }
            catch {
                Write-Host "   ‚ö†Ô∏è Direct tenant connection failed, trying interactive..." -ForegroundColor Yellow
                # Fallback to interactive without tenant hint
                Connect-MgGraph -Scopes 'Application.Read.All' -ErrorAction Stop
            }
        }
        else {
            Write-Host "   Using custom domain for connection..." -ForegroundColor Gray
            
            # For custom domains, use interactive login (user will select correct tenant)
            Connect-MgGraph -Scopes 'Application.Read.All' -ErrorAction Stop
        }
        
        # Wait for connection to stabilize
        Write-Host "   Waiting for connection to stabilize..." -ForegroundColor Gray
        Start-Sleep -Seconds 3
        
        # Verify connection
        $context = Get-MgContext -ErrorAction Stop
        if (-not $context -or -not $context.TenantId) {
            throw "No valid context after connection"
        }
        
        # Get organization details to verify tenant
        try {
            $org = Get-MgOrganization -ErrorAction Stop | Select-Object -First 1
            $actualTenantDomain = ($org.VerifiedDomains | Where-Object { $_.IsInitial -eq $true }).Name
            $tenantDisplayName = $org.DisplayName
            
            Write-Host "‚úì Successfully connected to Microsoft Graph" -ForegroundColor Green
            Write-Host "   Tenant ID: $($context.TenantId)" -ForegroundColor White
            Write-Host "   Tenant Name: $tenantDisplayName" -ForegroundColor White
            Write-Host "   Tenant Domain: $actualTenantDomain" -ForegroundColor White
            Write-Host "   Account: $($context.Account)" -ForegroundColor White
            
            # Check if we're connected to the intended tenant (for .onmicrosoft.com domains)
            if ($TenantDomain -like "*.onmicrosoft.com" -and $actualTenantDomain -ne $TenantDomain) {
                Write-Host "‚ö†Ô∏è Warning: Connected to different tenant than requested!" -ForegroundColor Yellow
                Write-Host "   Requested: $TenantDomain" -ForegroundColor Gray
                Write-Host "   Actual: $actualTenantDomain" -ForegroundColor Gray
                
                $continue = Read-Host "Do you want to continue with this tenant? (y/n)"
                if ($continue.ToLower() -notin @('y', 'yes')) {
                    return @{
                        Success = $false
                        Context = $null
                        Error   = "User chose not to continue with different tenant"
                    }
                }
            }
            
        }
        catch {
            Write-Host "‚úì Connected, but unable to verify tenant details" -ForegroundColor Yellow
            Write-Host "   Tenant ID: $($context.TenantId)" -ForegroundColor White
            Write-Host "   Account: $($context.Account)" -ForegroundColor White
        }
        
        Write-Host ""
        return @{
            Success = $true
            Context = $context
        }
        
    }
    catch {
        Write-Host "‚ùå Failed to connect to Microsoft Graph" -ForegroundColor Red
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Gray
        
        # Provide helpful error messages
        if ($_.Exception.Message -like "*Invalid tenant*") {
            Write-Host "   üí° Tip: For .onmicrosoft.com domains, ensure the tenant name is correct" -ForegroundColor Yellow
            Write-Host "        Example: 'contoso.onmicrosoft.com' not 'user@contoso.onmicrosoft.com'" -ForegroundColor Yellow
        }
        
        Write-Host ""
        
        return @{
            Success = $false
            Context = $null
            Error   = $_.Exception.Message
        }
    }
}

# Function to test connection capabilities
function Test-ConnectionCapabilities {
    param()
    
    Write-Host "üîç Testing connection capabilities..." -ForegroundColor Gray
    
    $results = @{
        ContextValid           = $false
        ApplicationAccess      = $false
        ServicePrincipalAccess = $false
        OrganizationAccess     = $false
        OverallSuccess         = $false
    }
    
    try {
        # Test 1: Context validation
        $context = Get-MgContext -ErrorAction Stop
        if ($context -and $context.TenantId) {
            $results.ContextValid = $true
            Write-Host "   ‚úì Graph context is valid" -ForegroundColor Green
        }
        
        # Test 2: Application access
        try {
            $null = Get-MgApplication -Top 1 -ErrorAction Stop
            $results.ApplicationAccess = $true
            Write-Host "   ‚úì Application read access confirmed" -ForegroundColor Green
        }
        catch {
            Write-Host "   ‚ùå Application access failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Test 3: Service Principal access
        try {
            $null = Get-MgServicePrincipal -Top 1 -ErrorAction Stop
            $results.ServicePrincipalAccess = $true
            Write-Host "   ‚úì Service Principal read access confirmed" -ForegroundColor Green
        }
        catch {
            Write-Host "   ‚ùå Service Principal access failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Test 4: Organization access (optional)
        try {
            $null = Get-MgOrganization -Top 1 -ErrorAction Stop
            $results.OrganizationAccess = $true
            Write-Host "   ‚úì Organization read access confirmed" -ForegroundColor Green
        }
        catch {
            Write-Host "   ‚ö†Ô∏è Organization access limited (this may be normal)" -ForegroundColor Yellow
        }
        
        # Determine overall success
        $results.OverallSuccess = $results.ContextValid -and $results.ApplicationAccess -and $results.ServicePrincipalAccess
        
        if ($results.OverallSuccess) {
            Write-Host "‚úì All required capabilities confirmed" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è Some capabilities missing - script functionality may be limited" -ForegroundColor Yellow
        }
        
    }
    catch {
        Write-Host "   ‚ùå Connection test failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host ""
    return $results
}

# Function to get current connection details
function Get-ConnectionDetails {
    param()
    
    try {
        $context = Get-MgContext -ErrorAction Stop
        if (-not $context -or -not $context.TenantId) {
            return $null
        }
        
        # Try to get organization details
        try {
            $org = Get-MgOrganization -ErrorAction Stop | Select-Object -First 1
            $tenantDomain = ($org.VerifiedDomains | Where-Object { $_.IsInitial -eq $true }).Name
            $tenantName = $org.DisplayName
        }
        catch {
            # Fallback: extract from account
            $tenantDomain = if ($context.Account -match "@(.+)$") { $matches[1] } else { "Unknown" }
            $tenantName = $tenantDomain
        }
        
        return @{
            TenantId     = $context.TenantId
            TenantDomain = $tenantDomain
            TenantName   = $tenantName
            Account      = $context.Account
            Scopes       = $context.Scopes
            AuthType     = $context.AuthType
        }
        
    }
    catch {
        return $null
    }
}

# Main connection management function
function Initialize-GraphConnection {
    param()
    
    Write-Host "=== MICROSOFT GRAPH CONNECTION MANAGER ===" -ForegroundColor Magenta
    Write-Host ""
    
    # Check for existing connection
    $currentDetails = Get-ConnectionDetails
    
    if ($currentDetails) {
        Write-Host "üîó Existing Microsoft Graph connection found:" -ForegroundColor Green
        Write-Host "   Tenant ID: $($currentDetails.TenantId)" -ForegroundColor White
        Write-Host "   Tenant Domain: $($currentDetails.TenantDomain)" -ForegroundColor White
        Write-Host "   Account: $($currentDetails.Account)" -ForegroundColor White
        Write-Host "   Scopes: $($currentDetails.Scopes -join ', ')" -ForegroundColor White
        Write-Host ""
        
        Write-Host "What would you like to do?" -ForegroundColor Yellow
        Write-Host "1. Use existing connection" -ForegroundColor Cyan
        Write-Host "2. Connect to different tenant" -ForegroundColor Cyan
        Write-Host "3. Reconnect to same tenant" -ForegroundColor Cyan
        Write-Host ""
        
        do {
            $choice = Read-Host "Enter your choice (1-3)"
            switch ($choice) {
                "1" {
                    Write-Host "‚úì Using existing connection" -ForegroundColor Green
                    Write-Host ""
                    return Test-ConnectionCapabilities
                }
                "2" {
                    # Disconnect and connect to new tenant
                    $disconnected = Disconnect-GraphSafely
                    if (-not $disconnected) {
                        Write-Host "‚ö†Ô∏è Disconnect may not have been clean, but continuing..." -ForegroundColor Yellow
                    }
                    
                    $targetTenant = Get-TenantInput
                    $connectionResult = Connect-ToTenant -TenantDomain $targetTenant
                    
                    if ($connectionResult.Success) {
                        $testResult = Test-ConnectionCapabilities
                        return $testResult.OverallSuccess
                    }
                    else {
                        return $false
                    }
                }
                "3" {
                    # Reconnect to same tenant
                    $currentTenant = $currentDetails.TenantDomain
                    Write-Host "üîÑ Reconnecting to current tenant: $currentTenant" -ForegroundColor Yellow
                    
                    $disconnected = Disconnect-GraphSafely
                    if (-not $disconnected) {
                        Write-Host "‚ö†Ô∏è Disconnect may not have been clean, but continuing..." -ForegroundColor Yellow
                    }
                    
                    $connectionResult = Connect-ToTenant -TenantDomain $currentTenant
                    
                    if ($connectionResult.Success) {
                        $testResult = Test-ConnectionCapabilities
                        return $testResult.OverallSuccess
                    }
                    else {
                        return $false
                    }
                }
                default {
                    Write-Host "‚ùå Invalid choice. Please enter 1, 2, or 3." -ForegroundColor Red
                }
            }
        } while ($true)
        
    }
    else {
        Write-Host "‚ùå No active Microsoft Graph connection found" -ForegroundColor Red
        Write-Host ""
        
        # No existing connection - get tenant and connect
        $targetTenant = Get-TenantInput
        $connectionResult = Connect-ToTenant -TenantDomain $targetTenant
        
        if ($connectionResult.Success) {
            $testResult = Test-ConnectionCapabilities
            return $testResult.OverallSuccess
        }
        else {
            return $false
        }
    }
}

# Execute connection initialization with retry logic
$maxRetries = 2
$retryCount = 0
$connectionReady = $false

do {
    $connectionReady = Initialize-GraphConnection
    
    if (-not $connectionReady) {
        $retryCount++
        if ($retryCount -lt $maxRetries) {
            Write-Host "‚ùå Connection setup failed." -ForegroundColor Red
            Write-Host "Would you like to try again? (y/n): " -ForegroundColor Yellow -NoNewline
            $retry = Read-Host
            if ($retry.ToLower() -in @('y', 'yes')) {
                Write-Host ""
                Write-Host "‚è≥ Retrying connection setup..." -ForegroundColor Yellow
                Write-Host ""
                continue
            }
            else {
                break
            }
        }
        else {
            Write-Host "‚ùå Maximum retry attempts reached." -ForegroundColor Red
            break
        }
    }
} while (-not $connectionReady -and $retryCount -lt $maxRetries)

# Final connection check
if (-not $connectionReady) {
    Write-Host "‚ùå Cannot proceed without a working Microsoft Graph connection." -ForegroundColor Red
    Write-Host "   Please verify your permissions and network connectivity." -ForegroundColor Gray
    Read-Host "Press Enter to exit"
    exit 1
}

# Clear variables for main script
$sp = $null
$app = $null
$certificates = $null
$isExpired = $null

# Script version
$scriptVersion = "v3.9"

Write-Host "=== TENANT CONNECTION INFO ===" -ForegroundColor Magenta

# Get final connection details
$finalDetails = Get-ConnectionDetails
if (-not $finalDetails) {
    Write-Host "‚ùå Critical Error: Connection lost after successful setup" -ForegroundColor Red
    Read-Host "Press Enter to exit"
    exit 1
}

# Display connection information
Write-Host "Tenant ID:     $($finalDetails.TenantId)" -ForegroundColor White
Write-Host "Tenant Name:   $($finalDetails.TenantName)" -ForegroundColor White
Write-Host "Tenant Domain: $($finalDetails.TenantDomain)" -ForegroundColor White
Write-Host "Account:       $($finalDetails.Account)" -ForegroundColor White
Write-Host "Scopes:        $($finalDetails.Scopes -join ', ')" -ForegroundColor White
Write-Host "Auth Type:     $($finalDetails.AuthType)" -ForegroundColor White
Write-Host ""

# Extract values for script use
$tenantDisplayName = $finalDetails.TenantName
$tenantPrefix = if ($finalDetails.TenantDomain -match "(.+)\.onmicrosoft\.com") { $matches[1] } else { $finalDetails.TenantDomain }
$primaryDomain = $finalDetails.TenantDomain
$context = Get-MgContext

# Define the App Name to search for (you can change this)
$targetAppName = "Office 365 Exchange Online"

# Pre-scan for ExchangeServerApp to get its display name for the Application Details section
$exchangeServerAppDisplayName = "Not Found"
try {
    Write-Host "üîç Scanning for ExchangeServerApp..." -ForegroundColor Gray
    $exchangeApp = Get-MgApplication -Filter "startswith(DisplayName,'ExchangeServerApp')" -ErrorAction Stop | Select-Object -First 1
    if ($exchangeApp) {
        $exchangeServerAppDisplayName = $exchangeApp.DisplayName
        Write-Host "‚úì Found ExchangeServerApp: $exchangeServerAppDisplayName" -ForegroundColor Green
    }
    else {
        Write-Host "‚ö†Ô∏è ExchangeServerApp not found" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ö†Ô∏è Warning: Could not retrieve ExchangeServerApp details: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Initialize HTML report variables with enhanced naming
$htmlReport = @()
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$fileTimestamp = Get-Date -Format "yyyy-MM-dd_HHmmss"
$safeAppName = $targetAppName -replace '[^\w\-_\.]', '_'
$htmlFilePath = ".\${tenantPrefix}_CertificateReport_${safeAppName}_${fileTimestamp}_${scriptVersion}.html"

# Start building HTML report with enhanced tenant information
$htmlReport += @"
<!DOCTYPE html>
<html>
<head>
    <title>Certificate Report - $targetAppName | $tenantDisplayName</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; border-left: 4px solid #3498db; padding-left: 10px; margin-top: 30px; }
        h3 { color: #2980b9; margin-top: 20px; }
        .header-info { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .header-grid { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; }
        .header-section h4 { margin: 0 0 10px 0; font-size: 1.1em; border-bottom: 1px solid rgba(255,255,255,0.3); padding-bottom: 5px; }
        .header-section p { margin: 5px 0; }
        .info-section { background-color: #ecf0f1; padding: 15px; border-radius: 5px; margin: 10px 0; }
        .cert-details { background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 10px 0; }
        .status-valid { color: #27ae60; font-weight: bold; }
        .status-expired { color: #e74c3c; font-weight: bold; }
        .not-found { color: #e67e22; font-style: italic; }
        .found { color: #27ae60; font-weight: bold; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { padding: 8px 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #3498db; color: white; }
        .summary-table { background-color: #ecf0f1; }
        .timestamp { text-align: center; color: #7f8c8d; font-size: 0.9em; margin-top: 20px; }
        .no-results { color: #e67e22; font-style: italic; padding: 10px; background-color: #fef9e7; border-radius: 5px; }
        .version-info { position: absolute; top: 10px; right: 20px; background-color: #34495e; color: white; padding: 5px 10px; border-radius: 15px; font-size: 0.8em; }
    </style>
</head>
<body>
    <div class="version-info">$scriptVersion</div>
    <div class="container">
        <h1>üîê Certificate Report</h1>
        
        <div class="header-info">
            <div class="header-grid">
                <div class="header-section">
                    <h4>üè¢ Tenant Information</h4>
                    <p><strong>Display Name:</strong> $tenantDisplayName</p>
                    <p><strong>Tenant ID:</strong> $($context.TenantId)</p>
                    <p><strong>Tenant Prefix:</strong> $tenantPrefix</p>
                    <p><strong>Primary Domain:</strong> $primaryDomain</p>
                </div>
                <div class="header-section">
                    <h4>üìã Report Details</h4>
                    <p><strong>Generated:</strong> $timestamp</p>
                    <p><strong>Target Application:</strong> $targetAppName</p>
                    <p><strong>Script Version:</strong> $scriptVersion</p>
                    <p><strong>Account:</strong> $($context.Account)</p>
                </div>
                <div class="header-section">
                    <h4>üì± Application Details</h4>
                    <p><strong>App Registration:</strong> $exchangeServerAppDisplayName</p>
                    <p><strong>Service Principal Name:</strong> $targetAppName</p>
                </div>
            </div>
        </div>

        <div class="info-section">
            <h3>üîç Connection Details</h3>
            <table>
                <tr><th>Property</th><th>Value</th></tr>
                <tr><td>Auth Type</td><td>$($context.AuthType)</td></tr>
                <tr><td>Scopes</td><td>$($context.Scopes -join ', ')</td></tr>
                <tr><td>Environment</td><td>$(if($context.Environment){$context.Environment}else{'Default'})</td></tr>
            </table>
        </div>
"@

Write-Host "=== CERTIFICATE REPORT FOR: $targetAppName ===" -ForegroundColor Magenta
Write-Host "Tenant: $tenantDisplayName ($tenantPrefix)" -ForegroundColor Cyan
Write-Host "Script Version: $scriptVersion" -ForegroundColor Gray
Write-Host ""
Write-Host "=== APPLICATION DETAILS ===" -ForegroundColor Yellow
Write-Host "App Registration:          $exchangeServerAppDisplayName" -ForegroundColor White
Write-Host "Service Principal Name:    $targetAppName" -ForegroundColor White
Write-Host ""

# ============================================================================
# 1. APP REGISTRATION SECTION
# ============================================================================
Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Blue
Write-Host "‚ïë                           APP REGISTRATION                                   ‚ïë" -ForegroundColor Blue  
Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Blue
Write-Host ""

# Add App Registration section to HTML
$htmlReport += @"
        <h2>üè¢ App Registration</h2>
"@

$appFound = $false

try {
    Write-Host "üîç Searching for ExchangeServerApp registrations..." -ForegroundColor Gray
    $apps = Get-MgApplication -Filter "startswith(DisplayName,'ExchangeServerApp')" -ErrorAction Stop
    
    if ($apps) {
        $apps | ForEach-Object {
            $app = $_
            $appFound = $true
            
            Write-Host "‚úì App Registration Found" -ForegroundColor Green
            Write-Host "  Display Name: $($app.DisplayName)" -ForegroundColor White
            Write-Host "  App ID:       $($app.AppId)" -ForegroundColor White
            Write-Host "  Object ID:    $($app.Id)" -ForegroundColor White
            Write-Host ""
            
            # Add app details to HTML
            $htmlReport += @"
        <div class="info-section">
            <h3>‚úì App Registration Found</h3>
            <table>
                <tr><th>Display Name</th><td>$($app.DisplayName)</td></tr>
                <tr><th>App ID</th><td>$($app.AppId)</td></tr>
                <tr><th>Object ID</th><td>$($app.Id)</td></tr>
                <tr><th>Created</th><td>$(if($app.CreatedDateTime){$app.CreatedDateTime}else{'Not available'})</td></tr>
            </table>
        </div>
"@
            
            # Check for certificates
            Write-Host "üìú CERTIFICATES:" -ForegroundColor Yellow
            $certificates = $app.KeyCredentials | Where-Object { $_.Type -eq 'AsymmetricX509Cert' }
            
            if ($certificates -and $certificates.Count -gt 0) {
                Write-Host "   Certificate count: $($certificates.Count)" -ForegroundColor Cyan
                Write-Host ""
                
                # Add certificates section to HTML
                $htmlReport += @"
        <h3>üìú Certificates ($($certificates.Count) found)</h3>
"@
                
                $certIndex = 1
                $certificates | ForEach-Object { 
                    $thumbprint = if ($_.CustomKeyIdentifier) { [System.Convert]::ToHexString($_.CustomKeyIdentifier) } else { "Not available" }
                    $isExpired = $_.EndDateTime -lt (Get-Date)
                    $statusClass = if ($isExpired) { "status-expired" } else { "status-valid" }
                    $statusText = if ($isExpired) { "üî¥ EXPIRED" } else { "üü¢ Valid" }
                    
                    Write-Host "   Certificate #${certIndex}:" -ForegroundColor White
                    Write-Host "     KeyId:       $($_.KeyId)" -ForegroundColor Cyan
                    Write-Host "     Thumbprint:  $thumbprint" -ForegroundColor Yellow
                    Write-Host "     Status:      $(if($isExpired){'üî¥ EXPIRED'}else{'üü¢ Valid'})" -ForegroundColor $(if ($isExpired) { 'Red' } else { 'Green' })
                    Write-Host "     DisplayName: $(if($_.DisplayName){$_.DisplayName}else{'Not set'})" -ForegroundColor Gray
                    Write-Host "     Type:        $($_.Type)" -ForegroundColor Gray
                    Write-Host "     StartDate:   $($_.StartDateTime)" -ForegroundColor Gray
                    Write-Host "     EndDate:     $($_.EndDateTime)" -ForegroundColor Gray
                    Write-Host ""
                    
                    # Add certificate details to HTML
                    $htmlReport += @"
        <div class="cert-details">
            <h4>Certificate #$certIndex</h4>
            <table>
                <tr><th>KeyId</th><td>$($_.KeyId)</td></tr>
                <tr><th>Thumbprint</th><td style="font-family: monospace;">$thumbprint</td></tr>
                <tr><th>Status</th><td><span class="$statusClass">$statusText</span></td></tr>
                <tr><th>Display Name</th><td>$(if($_.DisplayName){$_.DisplayName}else{'Not set'})</td></tr>
                <tr><th>Type</th><td>$($_.Type)</td></tr>
                <tr><th>Start Date</th><td>$($_.StartDateTime)</td></tr>
                <tr><th>End Date</th><td>$($_.EndDateTime)</td></tr>
                <tr><th>Usage</th><td>$(if($_.Usage){$_.Usage}else{'Not specified'})</td></tr>
            </table>
        </div>
"@
                    $certIndex++
                }
            }
            else {
                Write-Host "   No certificates found" -ForegroundColor Red
                Write-Host ""
                
                # Add no certificates message to HTML
                $htmlReport += @"
        <div class="no-results">
            <h3>üìú Certificates</h3>
            <p>No certificates found for this app registration</p>
        </div>
"@
            }
            
            # Check for client secrets
            Write-Host "üîë CLIENT SECRETS:" -ForegroundColor Yellow
            if ($app.PasswordCredentials -and $app.PasswordCredentials.Count -gt 0) {
                Write-Host "   Client secret count: $($app.PasswordCredentials.Count)" -ForegroundColor Cyan
                
                # Add client secrets info to HTML
                $htmlReport += @"
        <h3>üîë Client Secrets</h3>
        <p>Client secret count: <strong>$($app.PasswordCredentials.Count)</strong></p>
        <div class="info-section">
            <table>
                <tr><th>Display Name</th><th>End Date</th><th>Status</th></tr>
"@
                
                $app.PasswordCredentials | ForEach-Object {
                    $secretExpired = $_.EndDateTime -lt (Get-Date)
                    $secretStatus = if ($secretExpired) { "üî¥ EXPIRED" } else { "üü¢ Valid" }
                    $secretStatusClass = if ($secretExpired) { "status-expired" } else { "status-valid" }
                    
                    $htmlReport += @"
                <tr>
                    <td>$(if($_.DisplayName){$_.DisplayName}else{'Not set'})</td>
                    <td>$($_.EndDateTime)</td>
                    <td><span class="$secretStatusClass">$secretStatus</span></td>
                </tr>
"@
                }
                
                $htmlReport += @"
            </table>
        </div>
"@
            }
            else {
                Write-Host "   No client secrets found" -ForegroundColor Red
                
                # Add no client secrets message to HTML
                $htmlReport += @"
        <h3>üîë Client Secrets</h3>
        <p class="no-results">No client secrets found</p>
"@
            }
            Write-Host ""
        }
    }
    else {
        Write-Host "‚ö†Ô∏è No applications found matching the filter" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ùå Error searching for App Registration: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   This may indicate insufficient permissions or connection issues" -ForegroundColor Gray
    Write-Host ""
}

if (-not $appFound) {
    Write-Host "‚ùå No App Registration found with name pattern: ExchangeServerApp*" -ForegroundColor Red
    Write-Host "   This is normal for Microsoft first-party applications" -ForegroundColor Gray
    Write-Host ""
    
    # Add not found message to HTML
    $htmlReport += @"
        <div class="no-results">
            <h3>‚ùå App Registration Not Found</h3>
            <p>No App Registration found with name pattern: <strong>ExchangeServerApp*</strong></p>
            <p><em>This is normal for Microsoft first-party applications</em></p>
        </div>
"@
}

# ============================================================================
# 2. SERVICE PRINCIPAL SECTION  
# ============================================================================
Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
Write-Host "‚ïë                           SERVICE PRINCIPAL                                  ‚ïë" -ForegroundColor Green
Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
Write-Host ""

# Add Service Principal section to HTML
$htmlReport += @"
        <h2>üîß Service Principal</h2>
"@

$spFound = $false

try {
    Write-Host "üîç Searching for Service Principal: $targetAppName" -ForegroundColor Gray
    $servicePrincipals = Get-MgServicePrincipal -Filter "DisplayName eq '$targetAppName'" -ErrorAction Stop
    
    if ($servicePrincipals) {
        $servicePrincipals | ForEach-Object {
            $sp = $_
            $spFound = $true
            
            Write-Host "‚úì Service Principal Found" -ForegroundColor Green
            Write-Host "  Display Name: $($sp.DisplayName)" -ForegroundColor White
            Write-Host "  App ID:       $($sp.AppId)" -ForegroundColor White
            Write-Host "  Object ID:    $($sp.Id)" -ForegroundColor White
            Write-Host "  Type:         $($sp.ServicePrincipalType)" -ForegroundColor White
            Write-Host ""
            
            # Add service principal details to HTML
            $htmlReport += @"
        <div class="info-section">
            <h3>‚úì Service Principal Found</h3>
            <table>
                <tr><th>Display Name</th><td>$($sp.DisplayName)</td></tr>
                <tr><th>App ID</th><td>$($sp.AppId)</td></tr>
                <tr><th>Object ID</th><td>$($sp.Id)</td></tr>
                <tr><th>Type</th><td>$($sp.ServicePrincipalType)</td></tr>
                <tr><th>Enabled</th><td>$(if($sp.AccountEnabled){'üü¢ Yes'}else{'üî¥ No'})</td></tr>
                <tr><th>Publisher</th><td>$(if($sp.PublisherName){$sp.PublisherName}else{'Not available'})</td></tr>
            </table>
        </div>
"@
            
            # Check for certificates (same logic as app registration)
            Write-Host "üìú CERTIFICATES:" -ForegroundColor Yellow
            $certificates = $sp.KeyCredentials | Where-Object { $_.Type -eq 'AsymmetricX509Cert' }
            
            if ($certificates -and $certificates.Count -gt 0) {
                Write-Host "   Certificate count: $($certificates.Count)" -ForegroundColor Cyan
                Write-Host ""
                
                # Add certificates section to HTML
                $htmlReport += @"
        <h3>üìú Certificates ($($certificates.Count) found)</h3>
"@
                
                $certIndex = 1
                $certificates | ForEach-Object { 
                    $thumbprint = if ($_.CustomKeyIdentifier) { [System.Convert]::ToHexString($_.CustomKeyIdentifier) } else { "Not available" }
                    $isExpired = $_.EndDateTime -lt (Get-Date)
                    $statusClass = if ($isExpired) { "status-expired" } else { "status-valid" }
                    $statusText = if ($isExpired) { "üî¥ EXPIRED" } else { "üü¢ Valid" }
                    
                    Write-Host "   Certificate #${certIndex}:" -ForegroundColor White
                    Write-Host "     KeyId:       $($_.KeyId)" -ForegroundColor Cyan
                    Write-Host "     Thumbprint:  $thumbprint" -ForegroundColor Yellow
                    Write-Host "     Status:      $(if($isExpired){'üî¥ EXPIRED'}else{'üü¢ Valid'})" -ForegroundColor $(if ($isExpired) { 'Red' } else { 'Green' })
                    Write-Host "     DisplayName: $(if($_.DisplayName){$_.DisplayName}else{'Not set'})" -ForegroundColor Gray
                    Write-Host "     Type:        $($_.Type)" -ForegroundColor Gray
                    Write-Host "     StartDate:   $($_.StartDateTime)" -ForegroundColor Gray
                    Write-Host "     EndDate:     $($_.EndDateTime)" -ForegroundColor Gray
                    Write-Host ""
                    
                    # Add certificate details to HTML
                    $htmlReport += @"
        <div class="cert-details">
            <h4>Certificate #$certIndex</h4>
            <table>
                <tr><th>KeyId</th><td>$($_.KeyId)</td></tr>
                <tr><th>Thumbprint</th><td style="font-family: monospace;">$thumbprint</td></tr>
                <tr><th>Status</th><td><span class="$statusClass">$statusText</span></td></tr>
                <tr><th>Display Name</th><td>$(if($_.DisplayName){$_.DisplayName}else{'Not set'})</td></tr>
                <tr><th>Type</th><td>$($_.Type)</td></tr>
                <tr><th>Start Date</th><td>$($_.StartDateTime)</td></tr>
                <tr><th>End Date</th><td>$($_.EndDateTime)</td></tr>
                <tr><th>Usage</th><td>$(if($_.Usage){$_.Usage}else{'Not specified'})</td></tr>
            </table>
        </div>
"@
                    $certIndex++
                }
            }
            else {
                Write-Host "   No certificates found" -ForegroundColor Red
                Write-Host ""
                
                # Add no certificates message to HTML
                $htmlReport += @"
        <div class="no-results">
            <h3>üìú Certificates</h3>
            <p>No certificates found for this service principal</p>
        </div>
"@
            }
            
            # Check for client secrets
            Write-Host "üîë CLIENT SECRETS:" -ForegroundColor Yellow
            if ($sp.PasswordCredentials -and $sp.PasswordCredentials.Count -gt 0) {
                Write-Host "   Client secret count: $($sp.PasswordCredentials.Count)" -ForegroundColor Cyan
                
                # Add client secrets info to HTML
                $htmlReport += @"
        <h3>üîë Client Secrets</h3>
        <p>Client secret count: <strong>$($sp.PasswordCredentials.Count)</strong></p>
        <div class="info-section">
            <table>
                <tr><th>Display Name</th><th>End Date</th><th>Status</th></tr>
"@
                
                $sp.PasswordCredentials | ForEach-Object {
                    $secretExpired = $_.EndDateTime -lt (Get-Date)
                    $secretStatus = if ($secretExpired) { "üî¥ EXPIRED" } else { "üü¢ Valid" }
                    $secretStatusClass = if ($secretExpired) { "status-expired" } else { "status-valid" }
                    
                    $htmlReport += @"
                <tr>
                    <td>$(if($_.DisplayName){$_.DisplayName}else{'Not set'})</td>
                    <td>$($_.EndDateTime)</td>
                    <td><span class="$secretStatusClass">$secretStatus</span></td>
                </tr>
"@
                }
                
                $htmlReport += @"
            </table>
        </div>
"@
            }
            else {
                Write-Host "   No client secrets found" -ForegroundColor Red
                
                # Add no client secrets message to HTML
                $htmlReport += @"
        <h3>üîë Client Secrets</h3>
        <p class="no-results">No client secrets found</p>
"@
            }
            Write-Host ""
        }
    }
    else {
        Write-Host "‚ö†Ô∏è No service principal found with the specified name" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ùå Error searching for Service Principal: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   This may indicate insufficient permissions or connection issues" -ForegroundColor Gray
    Write-Host ""
}

if (-not $spFound) {
    Write-Host "‚ùå No Service Principal found with name: $targetAppName" -ForegroundColor Red
    Write-Host ""
    
    # Add not found message to HTML
    $htmlReport += @"
        <div class="no-results">
            <h3>‚ùå Service Principal Not Found</h3>
            <p>No Service Principal found with name: <strong>$targetAppName</strong></p>
        </div>
"@
}

# ============================================================================
# SUMMARY
# ============================================================================
Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Magenta
Write-Host "‚ïë                                SUMMARY                                       ‚ïë" -ForegroundColor Magenta
Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Magenta
Write-Host "Tenant:             $tenantDisplayName ($tenantPrefix)" -ForegroundColor White
Write-Host "Target Application: $targetAppName" -ForegroundColor White
Write-Host "App Registration:   $(if($appFound){'‚úì Found'}else{'‚ùå Not Found'})" -ForegroundColor $(if ($appFound) { 'Green' }else { 'Red' })
Write-Host "Service Principal:  $(if($spFound){'‚úì Found'}else{'‚ùå Not Found'})" -ForegroundColor $(if ($spFound) { 'Green' }else { 'Red' })
Write-Host "Report saved to:    $htmlFilePath" -ForegroundColor Cyan
Write-Host ""
Write-Host "=== SCRIPT COMPLETED ===" -ForegroundColor Magenta

# Add summary section to HTML and close the HTML
$htmlReport += @"
        <h2>üìä Summary</h2>
        <div class="info-section">
            <table class="summary-table">
                <tr><th>Tenant</th><td>$tenantDisplayName ($tenantPrefix)</td></tr>
                <tr><th>Target Application</th><td>$targetAppName</td></tr>
                <tr><th>App Registration</th><td><span class="$(if($appFound){'found'}else{'not-found'})">$(if($appFound){'‚úì Found'}else{'‚ùå Not Found'})</span></td></tr>
                <tr><th>Service Principal</th><td><span class="$(if($spFound){'found'}else{'not-found'})">$(if($spFound){'‚úì Found'}else{'‚ùå Not Found'})</span></td></tr>
                <tr><th>Script Version</th><td>$scriptVersion</td></tr>
                <tr><th>Report File</th><td style="font-family: monospace; font-size: 0.9em;">$htmlFilePath</td></tr>
            </table>
        </div>
        
        <div class="timestamp">
            <p>Report generated on $timestamp</p>
            <p>File: <strong>$htmlFilePath</strong></p>
        </div>
    </div>
</body>
</html>
"@

# Write HTML report to file
$htmlContent = $htmlReport -join "`n"
$htmlContent | Out-File -FilePath $htmlFilePath -Encoding UTF8

Write-Host ""
Write-Host "üìÑ HTML Report saved to: $htmlFilePath" -ForegroundColor Green
Write-Host "üåê Opening report in default browser..." -ForegroundColor Yellow

# Open the HTML file in the default browser
Start-Process $htmlFilePath

# Clear variables at the end
$sp = $null
$app = $null
$certificates = $null
$isExpired = $null
$appFound = $null
$spFound = $null

Write-Host ""
Write-Host "üßπ Variables cleared" -ForegroundColor Gray